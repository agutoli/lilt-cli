#!/usr/bin/env python
import json
import os.path
import argparse
import sys, os

from lilt_cli import (upload_segments, download_document)

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='commands')

# # A create command
download_parser = subparsers.add_parser('download', help='download translations')
download_parser.add_argument('--api-key', action='store', help='API Key Authentication')
download_parser.add_argument('--is-confirmed', action='store_true', default=None, help='download confirmed term only')
download_parser.add_argument('--is-reviewed', action='store_true', default=None, help='download reviwed term only')
download_parser.add_argument('--project-id', required=True, action='store', help='project id')
download_parser.add_argument('--filename', required=True, action='store', help='keys filename')
download_parser.add_argument('--output-file', required=True, action='store', help='file output name')
download_parser.add_argument('download_action', action='store_true')

upload_parser = subparsers.add_parser('upload', help='upload terms')
upload_parser.add_argument('--api-key', action='store', help='API Key Authentication')
upload_parser.add_argument('--project-id', required=True, action='store', help='project id')
upload_parser.add_argument('--filename', required=True, action='store', help='keys filename')
upload_parser.add_argument('upload_action', action='store_true')

args = parser.parse_args()

os.environ["LILT_API_KEY"] = args.api_key or os.environ.get("LILT_API_KEY", "")

if not os.environ["LILT_API_KEY"]:
    raise Exception('set "env LILT_API_KEY" or pass "--api-key" parameter!')

if 'download_action' in args:
    print("Downloading segments...")
    content = download_document(args.filename,
        args.project_id, args.is_confirmed, args.is_reviewed)

    if not content:
        print('file "%s" does not exists' % args.filename)
    else:
        dir_path = os.path.join(os.getcwd(), args.output_file)
        file = open(dir_path, "w")
        file.write(content)
        file.close()

if 'upload_action' in args:
    print("Uploading terms...")
    document_id = upload_segments(args.filename, args.project_id)
    print("New document created! #%s" % document_id)
